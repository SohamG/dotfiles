#+STARTUP: show3levels
#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle init.el

* Startup
:PROPERTIES:
:ID:       f17ee97f-febc-4774-acd2-db09c81b5ab8
:END:
This region is some basic/sanity check settings.
Note: Only edit with <C-c '> or else Orgmode will screw up the formatting.
#+BEGIN_SRC emacs-lisp
  ;; SPDX-License-Identifier: MIT

  (setq inhibit-startup-message t)
  (scroll-bar-mode -1) ; Disable visible scrollbar
  (tool-bar-mode -1) ;
  (tooltip-mode -1) ; Disable tooltips
  (set-fringe-mode 10) ; Give some breathing room
  (menu-bar-mode -1) ; Disable the menu bar
  (line-number-mode 1)

  (setq my/monofont "Fira Code"
    		  my/varfont "Monocraft Nerd Font")

  ;; It is important to set some stuff AFTER
  ;; the first frame has been made.
  ;; These settings dont work in the server context.
  (add-hook 'server-after-make-frame-hook
    				  #'(lambda nil
    						  (display-line-numbers-mode 1)
    						  (setq display-line-numbers 'relative)
    						  (global-display-fill-column-indicator-mode 1)
    						  (set-face-attribute 'default nil :font "Fira Code"
    																  :height 120 :weight 'regular)
    						  (set-face-attribute 'variable-pitch nil :font my/varfont 
    																  :height 120)))
  ;; Set up the visible bell
  (setq visible-bell t)
  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  ;; (global-set-key (kbd "C-x C-b") 'ibuffer)
  (savehist-mode 1)
  (setq use-dialog-box nil)
  (global-auto-revert-mode 1)
  (setq user-mail-address "sohamg2@gmail.com")
  ;; (setq lsp-prefer-flymake nil)
  (auto-save-visited-mode t)
  (setq make-backup-files nil)
  (setq help-window-select t)
  (setq-default scheme-program-name "guile")
  (tab-bar-mode 1)
  (transient-mark-mode -1)
  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path
    					   (expand-file-name "eln-cache/" user-emacs-directory))

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
  ;; Stop annoying pop up of compile command
  (add-to-list 'same-window-buffer-names "*compilation*")

  (setq-default indent-tabs-mode nil)

  (setq epa-pinentry-mode 'loopback)
#+END_SRC

#+RESULTS:
| *compilation* |

* Utility
:PROPERTIES:
:ID:       69251664-6dc5-4f2f-8e76-664eafc23b63
:END:
#+BEGIN_SRC emacs-lisp
  (defun sg/edit-file (file)
    "Function that opens the @file for editing"
    (interactive)
    (switch-to-buffer (find-file-noselect file)))
#+END_SRC

* Package Management
** Setup package management.
:PROPERTIES:
:ID:       75632330-7091-4080-9c71-cbf7b137c1d3
:END:
#+BEGIN_SRC emacs-lisp :tangle nil
  ;; Initialize package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
               ("elpa" . "https://elpa.gnu.org/packages/")
               ("nongnu" . "https://elpa.nongnu.org/nongnu/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
  ;; Initialize use-package on non-Linux platforms
  (unless
      (package-installed-p 'use-package) (package-install 'use-package))
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
  (use-package command-log-mode)
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
  (use-package quelpa)
  (straight-use-package 'org)
#+END_SRC

#+RESULTS:
: t
** Straight
:PROPERTIES:
:ID:       cef63205-4ff8-4af7-9a5f-062ba8a1e256
:END:
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  ;; Not having this makes Emacs load the builtin outdated org,
  ;; leading to the newer org from straight panicking.
  (straight-use-package 'org)
#+end_src

#+RESULTS:
: t

** Completions
Only Ivy is currently enabled.
**** Vertico
:PROPERTIES:
:ID:       d269a750-5cdf-40c5-ba88-23cf5444f980
:END:
   #+BEGIN_SRC emacs-lisp :tangle nil
     ;; (use-package vertico
     ;;   :init
     ;;   (vertico-mode)
     ;;   :bind
     ;;   (:map vertico-map
     ;; 	     ("C-j" . vertico-next)
     ;; 	     ("C-k" . vertico-previous)))
     ;; (use-package savehist
     ;;   :init
     ;;   (savehist-mode))
     ;; ;; Enable richer annotations using the Marginalia package
     ;; (use-package marginalia
     ;;   ;; Either bind `marginalia-cycle` globally or only in the minibuffer
     ;;   :bind (:map minibuffer-local-map
     ;; 		   ("M-A" . marginalia-cycle))
     ;;   ;; The :init configuration is always executed (Not lazy!)
     ;;   :init
     ;;   ;; Must be in the :init section of use-package such that the mode gets
     ;;   ;; enabled right away. Note that this forces loading the package.
     ;;   (marginalia-mode))
     ;; ;; Optionally use the `orderless' completion style.
     ;; (use-package orderless
     ;;   :ensure t
     ;;   :custom
     ;;   (completion-styles '(orderless basic))
     ;;   (completion-category-overrides '((file (styles basic partial-completion)))))
#+END_SRC

#+RESULTS:
**** Ivy
:PROPERTIES:
:ID:       d914dc6b-b55b-4001-b145-a54cc08bb325
:END:
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
        :config
        (ivy-mode)
        (advice-add #'counsel-M-x
                    :after #'(lambda ()
                               (setq last-counsel-M-x-command
                                     (caar command-history))))
        :bind
        (:map ivy-mode-map
      		("C-j" . 'ivy-next-line)
      		("C-k" . 'ivy-previous-line)
      		("C-<return>" . 'ivy-immediate-done)))

      (use-package counsel
        :after ivy
        :config
        (counsel-mode))
      (use-package swiper
        :after ivy)
      ;; Remember the last used command
      (use-package smex)
    #+END_SRC
**** Consult
:PROPERTIES:
:ID:       e808d9bd-bf25-4939-bd9e-17c78a212e49
:END:
    #+BEGIN_SRC emacs-lisp :tangle nil
      ;; Example configuration for Consult
      (use-package consult
	;; Replace bindings. Lazily loaded due by `use-package'
	:bind (;; C-c bindings (mode-specific-map)
	       ("C-c h" . consult-history)
	       ("C-c m" . consult-mode-command)
	       ("C-c k" . consult-kmacro)
	       ;; C-x bindings (ctl-x-map)
	       ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
	       ;; ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	       ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	       ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	       ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
	       ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
	       ;; Custom M-# bindings for fast register access
	       ("M-#" . consult-register-load)
	       ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	       ("C-M-#" . consult-register)
	       ;; Other custom bindings
	       ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	       ("<help> a" . consult-apropos)            ;; orig. apropos-command
	       ;; M-g bindings (goto-map)
	       ("M-g e" . consult-compile-error)
	       ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
	       ("M-g g" . consult-goto-line)             ;; orig. goto-line
	       ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	       ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
	       ("M-g m" . consult-mark)
	       ("M-g k" . consult-global-mark)
	       ("M-g i" . consult-imenu)
	       ("M-g I" . consult-imenu-multi)
	       ;; M-s bindings (search-map)
	       ("M-s d" . consult-find)
	       ("M-s D" . consult-locate)
	       ("M-s g" . consult-grep)
	       ("M-s G" . consult-git-grep)
	       ("M-s r" . consult-ripgrep)
	       ("M-s l" . consult-line)
	       ("M-s L" . consult-line-multi)
	       ("M-s m" . consult-multi-occur)
	       ("M-s k" . consult-keep-lines)
	       ("M-s u" . consult-focus-lines)
	       ;; Isearch integration
	       ("M-s e" . consult-isearch-history)
	       :map isearch-mode-map
	       ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
	       ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
	       ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
	       ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
	       ;; Minibuffer history
	       :map minibuffer-local-map
	       ("M-s" . consult-history)                 ;; orig. next-matching-history-element
	       ("M-r" . consult-history))                ;; orig. previous-matching-history-element

	;; Enable automatic preview at point in the *Completions* buffer. This is
	;; relevant when you use the default completion UI.
	:hook (completion-list-mode . consult-preview-at-point-mode)

	;; The :init configuration is always executed (Not lazy)
	:init
	(setq register-preview-delay 0.5
	      register-preview-function #'consult-register-format)

	;; Optionally tweak the register preview window.
	;; This adds thin lines, sorting and hides the mode line of the window.
	(advice-add #'register-preview :override #'consult-register-window)

	;; (advice-add #'completing-read-multiple :override #'consult-completing-read-multiple)

	;; Use Consult to select xref locations with preview
	(setq xref-show-xrefs-function #'consult-xref
	      xref-show-definitions-function #'consult-xref)
	:config
	(consult-customize
	 consult-theme
	 :preview-key '(:debounce 0.2 any)
	 consult-ripgrep consult-git-grep consult-grep
	 consult-bookmark consult-recent-file consult-xref
	 consult--source-bookmark consult--source-recent-file
	 consult--source-project-recent-file
	 :preview-key (kbd "M-."))

	;; Optionally configure the narrowing key.
	;; Both < and C-+ work reasonably well.
	(setq consult-narrow-key "<"))

    #+END_SRC 
**** Snippets
:PROPERTIES:
:ID:       3207fa30-f8a8-4ea6-a83b-47ba5a06c160
:END:
#+BEGIN_SRC emacs-lisp
	(use-package yasnippet
		:config
		(yas-global-mode 1)
		(setq yas-snippet-dirs '("~/.emacs.d/snippets")))

	;; (use-package yasnippet-snippets
	;; 	:after yasnippet)
#+END_SRC

#+RESULTS:

** Themeing
:PROPERTIES:
:ID:       7297f5da-5f2b-4f30-aad2-d628d0ac380e
:END:
  #+BEGIN_SRC emacs-lisp
    (use-package doom-modeline :ensure t :init (doom-modeline-mode 1)
      :custom ((doom-modeline-height 15)))
    (use-package doom-themes)
    (load-theme 'doom-dracula t)
    ;; Frames only mode (yay tiling wm)
    (use-package frames-only-mode)
    ;;(frames-only-mode 1)
    ;; (use-package counsel)
    ;; (counsel-mode 1)
    (use-package nyan-mode
      :config
      (nyan-mode)
      (setq nyan-animate-nyancat t))
    (use-package all-the-icons)
#+END_SRC

#+RESULTS:

** Fonts
:PROPERTIES:
:ID:       84e0acd1-f58d-4d8f-833b-7f9fe189bdec
:END:
   #+BEGIN_SRC emacs-lisp
		 (use-package fira-code-mode
			 :hook server-after-make-frame
			 :config
			 (global-fira-code-mode 1))
		 (use-package emojify)
#+END_SRC

** Misc
:PROPERTIES:
:ID:       7242222b-3a5e-4c44-8292-057e6db2f0cb
:END:
   #+BEGIN_SRC emacs-lisp
     (use-package dockerfile-mode
       :config
       (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))
     (use-package yaml-mode)
     (use-package highlight-indentation)
     (use-package magit)
     (use-package hydra)
     (use-package which-key
       :config
       (setq which-key-idle-delay 0.2)
       (which-key-mode 1))
     (setq org-src-tab-acts-natively t)
     (use-package eterm-256color)
     (use-package vterm
       :load-path "~/.local/share/emacs-libvterm"
       :commands vterm)
     ;; (use-package company
     ;;   :config
     ;;   (global-company-mode 1)
     ;;   (setq company-idle-delay 0.2
     ;;     company-minimum-prefix-length 2)
     ;;   :bind
     ;;   (("M-TAB" . company-complete)))
     ;; (use-package company-box
     ;;   :hook (company-mode . company-box-mode))
     ;; (use-package company-shell
     ;;   :after company
     ;;   :config
     ;;   (add-to-list 'company-backends 'company-shell))
     (use-package plantuml-mode
       :config
       (setq plantuml-default-exec-mode 'executable))


     (use-package wc-mode)

     (use-package minions
       :config
       (minions-mode 1))
     (add-to-list 'global-mode-string '("" wc-buffer-stats))

     (use-package spdx
       :ensure t
       :straight (:host github :repo "condy0919/spdx.el")
       :bind (:map prog-mode-map
              ("C-c i l" . spdx-insert-spdx))
       :custom
       (spdx-copyright-holder 'auto)
       (spdx-project-detection 'auto))

     (use-package license-snippets)
#+END_SRC

#+RESULTS:
: t

** Corfu (Company alt.)
:PROPERTIES:
:ID:       4bd4e2bc-9063-4a32-848f-1e6bb8b23468
:END:
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-auto t)
    :bind
    (:map corfu-map
          ("RET" . nil))
    :init
    (global-corfu-mode))

  (use-package emacs
    :init
    (setq tab-always-indent 'complete))

  (use-package cape
    :init
    (add-to-list 'completion-at-point-functions #'cape-file)
    (add-to-list 'completion-at-point-functions #'cape-keyword)
    (add-to-list 'completion-at-point-functions #'cape-dabbrev))

  ;; Use Dabbrev with Corfu!
  (use-package dabbrev
    ;; Swap M-/ and C-M-/
    :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
    ;; Other useful Dabbrev configurations.
    :custom
    (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

* Evil
:PROPERTIES:
:ID:       4224925b-76f3-435b-b48b-601f2ac6cbbb
:END:
Embrace VIM.
#+BEGIN_SRC emacs-lisp
	(use-package evil
		:init
		(setq evil-want-integration t
		evil-want-keybinding nil
		evil-want-C-u-scroll t)
		:config
		(evil-mode 1))
	(use-package evil-collection
		:after evil
		:config
		(evil-collection-init))

	(use-package undo-tree
		:after evil
		:diminish
		:config
		(evil-set-undo-system 'undo-tree)
		(global-undo-tree-mode 1))
	(use-package evil-surround
		:config
		(global-evil-surround-mode 1))
#+END_SRC

#+RESULTS:

* Email
:PROPERTIES:
:ID:       0720941f-b2f6-4d38-a003-3202e2d2100c
:END:
** Mu4e
:PROPERTIES:
:ID:       0f56f7bd-3b97-4c66-88fb-c8990f53fae8
:END:
#+BEGIN_SRC emacs-lisp
  (use-package mu4e
    :straight nil
    :config
    (setq mu4e-change-filenames-when-moving t)

    (setq mu4e-update-interval nil)
    (setq mu4e-get-mail-command "mbsync -a")

    (setq mu4e-maildir "~/Maildir")

    (setq mu4e-drafts-folder "/gmail/[Gmail]/Drafts")
    (setq mu4e-sent-folder "/gmail/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/gmail/[Gmail]/All Mail")
    (setq mu4e-trash-folder "/gmail/[Gmail]/Trash"))

  (setq send-mail-function 'sendmail-send-it)
#+END_SRC

#+RESULTS:
: sendmail-send-it

** GNUs
:PROPERTIES:
:ID:       f451350e-f891-4255-b749-a09210d7a5a6
:END:
Gave up <2023-11-19 Sun>
<2023-11-22 Wed> Got this working ??
#+BEGIN_SRC emacs-lisp
  (use-package gnus
    :config
    ;; (setq mail-sources '((maildir :path "~/Maildir/gmail/Inbox/")))
    (setq gnus-secondary-select-methods '())
    (setq gnus-select-method '(nnmaildir
                               "please_work" (directory "~/Maildir/gmail/")
                               (directory "~/Maildir/gmail/[Gmail]/"))))
        
        ;;(setq gnus-secondary-select-methods
    ;;          '((nnmaildir "mail" '(directory "~/Maildir/gmail/Inbox/"))))
#+END_SRC

#+RESULTS:
: t

** NotMuch
:PROPERTIES:
:ID:       7351bd86-a196-4bf8-be95-d55f73681da7
:END:
#+BEGIN_SRC emacs-lisp
  (use-package notmuch)
#+END_SRC
* LSP IntelliSense
:PROPERTIES:
:ID:       18e60904-6928-4c0c-9edb-a324edaf237f
:END:
#+BEGIN_SRC emacs-lisp
	;; (use-package lsp-mode
	;;   :commands lsp
	;;   :hook (prog-mode-hook . lsp))
	;; (use-package lsp-ui
	;;   :commands lsp-ui-mode
	;;   :hook (prog-mode-hook . lsp-ui-mode))
	(use-package eglot)
	(use-package eglot-fsharp
		:config
		(setq inferior-fsharp-program "dotnet fsi --readline-"))
	(use-package consult-eglot)
	(use-package projectile
		:init
		(projectile-mode +1)
		:bind (:map projectile-mode-map))
	;;    (define-key projectile-mode-map (kbd "SPC p") 'projectile-command-map)
	;; (use-package counsel-projectile)
	(use-package clang-format
		:config
		(setq clang-format-style "file")
		(setq clang-format-fallback-style "Google")
		:hook
		(c-or-c++-mode . lsp))
	(use-package rainbow-delimiters
		:hook
		(prog-mode . rainbow-delimiters-mode))
	(use-package smartparens
		:config
		(setq sp-show-pair-from-inside nil)
		(require 'smartparens-config)
		:init
		:diminish smartparens-mode
		:config
		(smartparens-global-mode))
	;; (use-package paredit
	;;   :hook
	;;   (prog-mode . enable-paredit-mode))
	;; (use-package evil-paredit
	;;   :hook
	;;   (paredit-mode-hook . evil-paredit-mode))

	(use-package evil-nerd-commenter
		:config
		(evilnc-default-hotkeys))
	;; (use-package dap-mode
	;; 	:after lsp
	;; 	:config
	;; 	(require 'dap-gdb-lldb)
	;; 	(require 'dap-cpptools)
	;; 	(add-hook 'dap-stopped-hook
	;; 		  (lambda (arg) (call-interactively #'dap-hydra)))
	;; 	(setq dap-auto-configure-features '(sessions locals controls tooltip))
	;; 	(dap-register-debug-template "CPP GDB"
	;; 				 (list :type "gdb"
	;; 					   :request "launch"
	;; 					   :name "GDB::Run")))
	(use-package slime
		:config
		(setq inferior-lisp-program "sbcl"))
	(use-package nix-mode
		:mode "\\.nix\\'")
	(use-package editorconfig
		:config
		(editorconfig-mode 1))
	(use-package envrc
		:config
		(envrc-global-mode))
	(use-package emmet-mode)
	;; (use-package lsp-tailwindcss)
	(use-package zig-mode)
	(use-package rust-mode)
#+END_SRC

#+RESULTS:

** Scheme
:PROPERTIES:
:ID:       5f4c8941-788e-44d1-9d9e-96a54253b6e2
:END:
#+BEGIN_SRC emacs-lisp
  (use-package geiser-guile
    :mode
    ("\\.scm\\'" . geiser-mode))
  (use-package ac-geiser)

  (use-package racket-mode)
#+END_SRC

#+RESULTS:

** F#
:PROPERTIES:
:ID:       a8a9149c-9c3a-4aa4-9208-08e8900c1ece
:END:
#+BEGIN_SRC emacs-lisp
  (use-package fsharp-mode)
#+END_SRC
** OCaml
:PROPERTIES:
:ID:       5ed889b4-69e5-411d-b978-640d672f045f
:END:
#+BEGIN_SRC emacs-lisp
	(use-package tuareg)
	(setq opam-command "opam")
	;; ## added by OPAM user-setup for emacs / base ## 56ab50dc8996d2bb95e7856a6eddb17b ## you can edit, but keep this line
	(require 'opam-user-setup "~/.emacs.d/opam-user-setup.el")
	;; ## end of OPAM user-setup addition for emacs / base ## keep this line

#+END_SRC
** Go
:PROPERTIES:
:ID:       7b990b2c-0046-49b0-8163-865f5d32643d
:END:
#+BEGIN_SRC emacs-lisp
	;; https://github.com/golang/tools/blob/master/gopls/doc/emacs.md
	;; This is quite arcane...
	(defun project-find-go-module (dir)
		(when-let ((root (locate-dominating-file dir "go.mod")))
			(cons 'go-module root)))

	(cl-defmethod project-root ((project (head go-module)))
		(cdr project))
	(defun eglot-format-buffer-on-save ()
		(add-hook 'before-save-hook #'eglot-format-buffer -10 t))
	(use-package go-mode
		:mode "\\.go\\'"
		:config
		(add-hook 'project-find-functions #'project-find-go-module)
		(add-hook 'go-mode-hook 'eglot-ensure)
		(add-hook 'go-mode-hook #'eglot-format-buffer-on-save))

#+END_SRC
** Haskell
:PROPERTIES:
:ID:       5d3adbfe-d122-4255-9bec-6e87c248d576
:END:
#+BEGIN_SRC emacs-lisp
	(use-package haskell-mode)
#+END_SRC
** Java
:PROPERTIES:
:ID:       472fc405-334a-4815-b000-e0b9e02e16d1
:END:
#+BEGIN_SRC emacs-lisp
	(use-package eglot-java)
	(add-hook 'java-mode-hook 'eglot-java-mode)
	(add-hook 'eglot-java-mode-hook (lambda ()                                        
		(define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
		(define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
		(define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
		(define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
		(define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
		(define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh)))
#+END_SRC
** Vagrant/P4
:PROPERTIES:
:ID:       5f4f523f-5651-406e-9d25-7539e365029d
:END:
#+begin_src emacs-lisp :tangle yes
  (use-package vagrant-tramp)
  (use-package xcscope)
  ;; (add-to-list 'load-path (concat user-emacs-directory "p4-mode"))
  ;; https://raw.githubusercontent.com/p4lang/tutorials/master/vm/p4_16-mode.el
  (use-package p4_16-mode
    :straight (p4_16-mode :host github :repo "SohamG/p4_16-mode.el")
    :mode "\\.p4\\'")
#+end_src
* Org
:PROPERTIES:
:ID:       7186d384-961c-45a1-99e7-7651f07084ac
:END:
** Config
:PROPERTIES:
:ID:       257c9a78-6201-4824-8a0d-29edf823dacc
:END:
#+BEGIN_SRC emacs-lisp
	(defun my-just-one-space ()
		(interactive)
		(if (org-at-table-p)
				(org-table-blank-field)
			(just-one-space)))

	(use-package org
        :straight
		:bind (:map org-mode-map ("C-c SPC" . my-just-one-space))
		:hook org-indent-mode
		:custom
		(org-todo-keyword-faces
		 '(("TODO" . org-warning)
			 ("IN-PROG" . "green")
			 ("DONE" . "black")
			 ("NEXT" . "yellow")
			 ("LIMBO" . "brown")))
		:config

		(add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t)
		(add-hook 'org-mode-hook '(lambda ()
																(setq org-id-link-to-org-use-id t))))
	(use-package evil-org
		:after org
		:hook (org-mode . (lambda () evil-org-mode))
		:config
		(require 'evil-org-agenda)
		(evil-org-agenda-set-keys))
	(use-package org-contrib)
	(use-package ox-rss)
	(use-package org-bullets)
	(use-package gnuplot )
	(defun my/auto-call-fill-paragraph-for-org-mode ()
		"Call two modes to automatically call fill-paragraph for you."
		(visual-line-mode))
	(add-hook 'org-mode-hook 'my/auto-call-fill-paragraph-for-org-mode)
	(add-hook 'org-mode-hook 'org-bullets-mode)
	(setq org-hide-leading-stars t)
	(setq org-startup-with-inline-images t)
	(setq  org-log-into-drawer t)
	(setq org-log-done 'time)
	(setq org-export-backends '(ascii beamer html texinfo latex))
	(setq  org-bullets-bullet-list '("◉" "◎" "○" "►" "◇""♠" ))
	(use-package writeroom-mode)
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((plantuml . t))) ; this line activates plantuml
	(setq org-plantuml-exec-mode 'plantuml)
	(add-to-list
	 'org-src-lang-modes '("plantuml" . plantuml))
	(defun my-org-confirm-babel-evaluate (lang body)
		(not (string= lang "plantuml")))
	(setq org-confirm-babel-evaluate #'my-org-confirm-babel-evaluate)
#+END_SRC
*** ACM Latex Class
:PROPERTIES:
:ID:       488bf3d4-3dee-40ed-9e46-03bd6fc27921
:END:
#+BEGIN_SRC emacs-lisp
	(add-to-list 'org-latex-classes
							 '("acmart"
								 "\\documentclass{acmart}"
								 ("\\section{%s}" . "\\section*{%s}")
								 ("\\subsection{%s}" . "\\subsection*{%s}")
								 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
								 ("\\paragraph{%s}" . "\\paragraph*{%s}")
								 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC 
** Notes and Capture
:PROPERTIES:
:ID:       c50d208c-7836-438c-ab40-29b9142a639f
:END:
#+BEGIN_SRC emacs-lisp
	(defun my/agenda ()
		(interactive)
		(append (directory-files-recursively org-directory "\\todo\.org$") '("main.org")))

	(setq org-directory "/mnt/nextcloud/Notes"
				org-default-notes-file (concat org-directory "/main.org")
				org-capture-templates
				'(("n" "Note" entry (file+headline org-default-notes-file "Master Notes")
					 "* %^{TITLE|untitled} %^g %i\n %T \n %?\n")
					("t" "Todo" entry (file org-default-notes-file)
					 "* TODO %^{TITLE|untitled} %^g %i\n %T \n %?\n" :tree-type month))
				org-todo-keywords
				'((sequence "TODO(t)" "NEXT(n)" "IN-PROG(i)" "|" "DONE(d)" "WONT-DO(w@)" "LIMBO(l)"))
				org-id-link-to-org-use-id t
				org-refile-targets '((nil :maxlevel . 3))
				org-agenda-files (list org-default-notes-file))
	(defun my/make-note ()
		(interactive)
		(find-file org-directory))

	(setq org-tags-alist
				'(("lug" . "l")))
#+END_SRC

*** Deft
:PROPERTIES:
:ID:       38b33334-cd2b-4b51-b598-4023328951b7
:END:
#+BEGIN_SRC emacs-lisp
	(use-package deft
		:config
		(setq deft-directory "/mnt/nextcloud/Notes"
		deft-extensions '("org")
		deft-recursive t
		deft-use-filename-as-title t
		deft-default-extension "org")
		:bind
		("<f8>" . deft))

#+END_SRC

#+RESULTS:
: deft

** Use Org-Roam - Note taking/mind mapping system
:PROPERTIES:
:ID:       6cbd5374-a7fa-4a89-ad08-0a182e574a0a
:END:
#+BEGIN_SRC emacs-lisp :tangle nil
  (use-package emacsql-sqlite3)
  (use-package org-roam
    :after emacsql-sqlite3
    :config
    (setq org-roam-directory "~/Notes")
    (setq org-roam-database-connector 'sqlite3)
    (org-roam-db-autosync-mode)
    (setq org-roam-capture-templates
	  '(("m" "main" plain
	     "%?"
	     :if-new (file+head "main/${slug}.org"
				"#+title: ${title}\n")
	     :immediate-finish t
	     :unnarrowed t)
	    ("r" "reference" plain "%?"
	     :if-new
	     (file+head "reference/${title}.org" "#+title: ${title}\n")
	     :immediate-finish t
	     :unnarrowed t)
	    ("a" "article" plain "%?"
	     :if-new
	     (file+head "articles/${title}.org" "#+title: ${title}\n#+filetags: :article:\n")
	     :immediate-finish t
	     :unnarrowed t))))

#+END_SRC 

#+RESULTS:
: t

** Org Present
:PROPERTIES:
:ID:       278eeb02-1753-4938-a08c-cd21f44010c6
:END:
Test text.
#+BEGIN_SRC emacs-lisp
	(use-package org-present)

	(defun my/org-present-start ()
		(interactive)
		;; Center the presentation and wrap lines
		(setq visual-fill-column-width 800)
		(visual-fill-column-mode 1)
		;; Tweak font sizes
		(variable-pitch-mode 1)
		(buffer-face-set 'variable-pitch)
		(setq writeroom-width 800)
		;; NOTE: These settings might not be ideal for your machine, tweak them as needed!
		(set-face-attribute 'default nil :font my/monofont :weight 'regular :height 120)
		(set-face-attribute 'fixed-pitch nil :font my/monofont :weight 'light :height 120)
		(set-face-attribute 'variable-pitch nil :font my/varfont :weight 'light :height 1.1 )

		(setq face-remapping-alist '((default (:height 1.5) variable-pitch)
																			 (header-line (:height 4.0) variable-pitch)
																			 (org-document-title (:height 1.75) org-document-title)
																			 (org-code (:height 1.55) org-code)
																			 (org-verbatim (:height 1.55) org-verbatim)
																			 (org-block (:height 1.25) org-block)
																			 (org-block-begin-line (:height 0.7) org-block)))

		;; Load org-faces to make sure we can set appropriate faces
		(require 'org-faces)
		;; Hide emphasis markers on formatted text
		(setq-local org-hide-emphasis-markers t)

		;; Resize Org headings
		(dolist (face '((org-level-1 . 1.2)
										(org-level-2 . 1.1)
										(org-level-3 . 1.05)
										(org-level-4 . 1.0)
										(org-level-5 . 1.1)
										(org-level-6 . 1.1)
										(org-level-7 . 1.1)
										(org-level-8 . 1.1)))
			(set-face-attribute (car face) nil :font my/monofont :weight 'bold :height (cdr face)))

		;; ;; Make 
		;; the document title a bit bigger
		(set-face-attribute 'org-document-title nil :font my/varfont :weight 'bold :height 1.3)

		;; Make sure certain org faces use the fixed-pitch face when variable-pitch-mode is on
		(set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
		(set-face-attribute 'org-table nil :inherit 'fixed-pitch)
		(set-face-attribute 'org-formula nil :inherit 'fixed-pitch)
		(set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
		(set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
		(set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
		(set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
		(set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
		(visual-line-mode 1))
	(defun my/org-present-end ()
		(interactive)
		;; Stop centering the document
		(visual-fill-column-mode 0)
		(setq face-remapping-alist nil)
		;; Clear the header line string so that it isn't displayed
		(setq header-line-format nil)
		(variable-pitch-mode -1)
		(buffer-face-set 'default)
		;; Stop displaying inline images

								(set-face-attribute 'default nil :font "Fira Code"
																		:height 120 :weight 'regular)
		(org-remove-inline-images)
		(visual-line-mode 0))



	(defun my/org-present-prepare-slide (buffer-name heading)
		;; Show only top-level headlines
		(org-overview)

		;; Unfold the current entry
		(org-show-entry)

		;; Show only direct subheadings of the slide but don't expand them
		(org-show-children))
	;; Turn on variable pitch fonts in Org Mode buffers
	;; (add-hook 'org-present-mode-hook 'variable-pitch-mode)

	;; Register hooks with org-present
	(add-hook 'org-present-mode-hook 'my/org-present-start)
	(add-hook 'org-present-mode-quit-hook 'my/org-present-end)
	(add-hook 'org-present-after-navigate-functions 'my/org-present-prepare-slide)
#+END_SRC

#+RESULTS:
| my/org-present-prepare-slide |

** Babel
:PROPERTIES:
:ID:       f00d72f1-9bd9-4ec0-8af4-0ed59a80eefe
:END:
#+BEGIN_SRC emacs-lisp
  (defun org-babel-execute:makefile (body params)
    "Execute a makefile block"
    (with-temp-file ".org-make"
      (insert body))
    (org-babel-eval
     (format "make -f %s" ".org-make") ""))
  (org-babel-do-load-languages
  'org-babel-load-languages
  '((shell . t)))
#+END_SRC
* LaTeX
:PROPERTIES:
:ID:       d448f07c-4fbb-40b8-b456-3c34231231a5
:END:
  #+BEGIN_SRC emacs-lisp
    (use-package auctex)
    (use-package pdf-tools
      :config
      ;; Note to future self
      ;; This is probably better installed thru nix
      ;; as it attempts to compile a C program.
      ;; MAYBE add shell.nix to emacs directory.
      (pdf-tools-install))
  #+END_SRC

  #+RESULTS:
  : t

* Keybinds 
:PROPERTIES:
:ID:       6310193f-372c-47e2-9c19-e5d990ad46f6
:END:
Quality of life key binds.
** Setup General
:PROPERTIES:
:ID:       a9708d7d-729a-4bb6-a20d-86542a01810a
:END:
#+BEGIN_SRC emacs-lisp
	(use-package general
		:config
		(general-create-definer sg/leader-bind
			:prefix "SPC"))
#+END_SRC

** General leader map
:PROPERTIES:
:ID:       c10977c6-2fce-40c0-bceb-13710027ba80
:END:
#+BEGIN_SRC emacs-lisp
	(sg/leader-bind
		:keymaps '(normal emacs visual)
		"c" '(:ignore t :which-key "Configs")
		"cc" '(sg/edit-config :wk "Edit config file")
		"cn" '(sg/edit-nix-config :wk "Nix System Config")
		"cm" '(sg/show-mu4e-shortcuts :which-key "Mu4e evil help")
		"m" '(:ignore t :wk "Email")
		"mm" 'mu4e
		"s" '(:ignore t :wk "Shortcuts")
		"st" '(vterm :wk "VTerm")
		"si" '(indent-region :wk "Indent Region")
		"p" '(projectile-command-map :wk "Projectile")
		"w" '(:ignore t :wk "Window Management")
		"wl" 'evil-window-right
		"wh" 'evil-window-left
		"wj" 'evil-window-down
		"wk" 'evil-window-up
		"wL" 'evil-window-vsplit
		"wJ" 'evil-window-split
		"wd" 'evil-window-delete
		"wD" 'delete-other-windows
		"g" '(:ignore t :wk "GDB")
		"gm" 'gdb-many-windows
		"gg" 'gdb
		"gb" 'gud-break
		"gr" 'gud-run
		"gn" 'gud-next
		"gs" 'gud-step
		"gd" 'dap-hydra
		"l" '(display-line-numbers-mode :wk Toggle Line numbers)
		"o" '(:ignore t :wk "Org Globals")
		"oo" '(org-capture :wk "Capture")
		"oa" '(org-agenda :wk "Agenda")
		"oN" '(my/make-note :wk "Create New Note File")
		"ot" '(my/capture-todo :wk "Create TODO")
		"on" '(my/capture-note :wk "Create Note")
		"o." '(my/reagenda :wk "Refresh org-agenda-files")
		"op" '(:ignore t :wk "Org Present")
		"b" '(:ignore t :wk "Buffers")
		"bb" 'consult-buffer
		"SPC" 'clang-format-buffer
		"s" '(:ignore t :wk "SmartParens")
		"ss" 'sp-slurp-hybrid-sexp
		"r" '(:ignore t :wk "Registers")
		"rj" 'jump-to-register
		"ri" 'insert-register
		"rp" 'point-to-register
		"ry" 'counsel-yank-pop
		"rm" 'counsel-mark-ring
		"C" 'compile
		"e" '(:ignore t :wk "Eglot")
		"ea" 'eglot-code-actions
		"ef" 'eglot-format-buffer)
			;;; I guess dap-mode is really just better...
	;; (defhydra hydra-debug (global-map "<f2>")
	;;   "Make Emacs GDB less annoying"
	;;   ("s" gud-step "step")
	;;   ("n" gud-next "next")
	;;   ("u" gud-up "up")
	;;   ("d" gud-down "down")
	;;   ("f" gud-finish "finish"))
	;; (general-def 'normal lsp-mode :definer 'minor-mode
	;;   "SPC ," lsp-command-map)

#+END_SRC

#+RESULTS:

** Other General Binds
:PROPERTIES:
:ID:       02f11a09-e7fd-4f1c-aa4e-3a92d5b3fa17
:END:
	#+BEGIN_SRC emacs-lisp
		(general-define-key
		 "M-f" 'counsel-find-file
		 "M-b" 'counsel-buffer-or-recentf)
		(general-define-key
		 :prefix "C-c"
		 :keymaps '(org-mode-map)
		 "q" 'org-present-quit
		 "p" 'org-present
		 "s" 'my/org-present-start
		 "e" 'my/org-present-end )
	#+END_SRC
** Utility functions
:PROPERTIES:
:ID:       a3f62c22-2f29-401b-90c9-f13e1940b3e8
:END:
#+BEGIN_SRC emacs-lisp
	(defun my/capture-todo ()
		(interactive)
		(org-capture nil "t"))
	(defun my/capture-note ()
		(interactive)
		(org-capture nil "n"))
	(defun sg/edit-config ()
		"Edit configuration.org"
		(interactive)
		(sg/edit-file "~/.emacs.d/configuration.org"))
	(defun sg/edit-nix-config ()
		"Edit configuration.org"
		(interactive)
		(sg/edit-file "~/nixcfg/system/configuration.nix"))
	(defun sg/show-mu4e-shortcuts ()
		"Show Help for Evil collection for Mu4e"
		(interactive)
		(with-output-to-temp-buffer "tmphlp"
			(set-buffer "tmphlp")
			(insert-file-contents "~/.config/emacs/mu4ehelp.org")))
#+END_SRC
* EZRepl - Minor Mode
:PROPERTIES:
:ID:       fecf13ef-2b23-4680-9ba6-2a304b698495
:END:
    #+BEGIN_SRC emacs-lisp :tangle nil
      (define-minor-mode ezrepl-mode
	"Simple minor mode for running any interactive command as a repl"
	:global nil

	:lighter " EZRepl"

	:keymap '(([C-c C-e] . ezrepl-send-line))

	(make-variable-buffer-local
	 (defvar ezrepl-buffer-name #<"*ezrepl*">))
	(defun ezrepl-send-line ()
	  "Send line to current repl."))
    #+END_SRC
		
